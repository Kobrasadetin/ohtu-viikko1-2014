;#'static' variables
;#
	0x7FFF DC 32767 ;we need 0x7FFF for 30-bit multiplication
	0xC0cons dc -1073741824 ; 0xC0000000
	shabit01 dc -2147483647 ; 0x80000001
	shabit02 dc -2147483646 ; 0x80000002
	shabit03 dc -2147483644 ; 0x80000004
	
	;gui related
	skm2m DC 2559974 ;altitude to change from km to m
	decmax DC 2559744 ;max decimal

	;screen coordinates
	screen dc 8192
	scrTIM dc 16924
	scrALT dc 20758
	scrATT dc 24278
	scrVEL dc 22998
	scrDES dc 21878
	scrTHR dc 25398
	screen5 dc 12040
	screen6 dc 12044
	
	;ASCII characters
	ascii dc 27392
	ascii0 dc 28328
	ascii1 dc 28346
	ascii2 dc 28364
	ascii3 dc 28382
	ascii4 dc 28400
	ascii5 dc 28418
	ascii6 dc 28436
	ascii7 dc 28454
	ascii8 dc 28472
	ascii9 dc 28490
	asciiSPA dc 28508
	asciiSLA dc 28526
	
	
	cgmradi dc 1738140
	cgconst dc 27810240
	cgconst2 DC 108850576

	
;## global variables
;##

	;ORBIT TEST
	;gsalt dc 15360000
	;gsvel dc 422807
	;gsdes dc 0
	;NEGATIVE TEST
	;gsdes dc 0;descent rate (fx15.10) m/s
	
	gpchr dc 0 ;character pointer for strings
	gpscr dc 21878 ;screen pointer

	;global moon lander variables
	;fx15.8 = 24B8 where max value = 8388607
	;fx24.8 = 24B8 where max value = 2147483647
	gtime dc 0 ;mission time	
	gsvel dc 1732994 ;vertical velocity (fx15.10) m/s
	gsalt dc 4412160 ;height from moon surface, (fx24.8) m
	gsdes dc 20912 ;descent rate (fx15.10) m/s
	gsfue dc 265280 ;fuel, in (fx28.4) kg
	gsemp dc 123302 ;lander mass WITHOUT fuel, in (fx28.4) kg
	gsmas dc 388582 ;current mass fx28.4 kg
	gsatt dc 0 ;current attitude, DEG
	gsthr dc 0 ;current fuel flow, (fx28.4) kg/s  (= implicitly thrust in kg/s * 3000m/s, 3kN)
	
	ggrav dc 415 ;effect of moon gravity at current height
	;ggcor dc 0;
	;ggcen dc 0;
	
	ggfxc dc 0 ;counter for advancing time

;function buffer:
	bufp dc 0
	buf0 dc 0
	buf1 dc 0
	buf2 dc 0
	buf3 dc 0
	buf4 dc 0
	buf5 dc 0
	buf6 dc 0
	buf7 dc 0

;##############################################################################
; MAIN GAME LOOP
;##############################################################################

mainloop	LOAD R1, ggfxc
			JNEG R1, BYPASSG			
			
; GRAPHICS UPDATE

			LOAD R0, =-1
			LOAD R1, gtime
			SHL R1, =8
			LOAD R2, scrTIM
			PUSH SP, R1
			PUSH SP, R2
			CALL SP, prntFXD
			
			LOAD R0, =-1
			LOAD R1, gsatt
			LOAD R2, scrATT
			PUSH SP, R1
			PUSH SP, R2
			CALL SP, prntFXD
			
			LOAD R1, gsthr
			MUL R1, =108
			LOAD R2, scrTHR
			PUSH SP, R1
			PUSH SP, R2
			CALL SP, prntFXD
			
			LOAD R0, =0
			LOAD R1, gsalt
			COMP R1, skm2m
			JNGRE mldralt
			DIV R1, =1000
mldralt		LOAD R2, scrALT
			PUSH SP, R1
			PUSH SP, R2
			CALL SP, prntFXD
			
			LOAD R1, gsvel
			SHRA R1, =2
			LOAD R2, scrVEL
			PUSH SP, R1
			PUSH SP, R2
			CALL SP, prntFXD
			
			LOAD R1, gsdes
			SHRA R1, =2
			LOAD R2, scrDES
			PUSH SP, R1
			PUSH SP, R2
			CALL SP, prntFXD
			
			IN R1, =kbd
			STORE R1, ggfxc
			
BYPASSG		LOAD R1, ggfxc ;skip counter
			ADD R1, =1
			STORE R1, ggfxc

;##############################################################################			
;PHYSICS
;##############################################################################
	
	; calculate new total mass - reduce fuel by amount ejected
			LOAD R1, gsfue
			COMP R1, gsthr
			JGRE mMass ; fuel empty?
			STORE R1, gsthr
mMass		SUB R1, gsthr 
			STORE R1, gsfue
			LOAD R2, gsemp
			ADD R2, R1
			STORE R1, gsmas
	
	;calculate constant forces to r3 (VEL. acc.  fx15.10) and r4 (DES. acc fx15.10)
			LOAD R3, =0
			LOAD R4, =0
	
	;calculate forces due to our rotating frame of reference
	
	;calculate coriolis force
			LOAD R1, gsdes
			LOAD R2, gsvel
			LOAD R5, =1 ;sign
			JPOS R1, mCor01
			MUL R1, =-1
			MUL R5, =-1
mCor01		JPOS R2, mCor02
			MUL R2, =-1
			MUL R5, =-1
mCor02		MUL R2, =2
			PUSH SP, =0
			PUSH SP, =0
			PUSH SP, R1
			PUSH SP, R2
			CALL SP, multiply
			POP SP, R3
			POP SP, R2
			SHR R3, =18 ;result in fx30.20 m2/s2, clean to fx30.2 m2/s2			
			SHL R2, =12
			OR R3, R2				
			LOAD R2, gsalt
			SHRA R2, =16
			ADD R2, =6790 ;R2 = distance in 256/1 m
			LOAD R1, R3 ;save for rounding
			DIV R3, R2 ;result in fx26.10 m/s2
			
			MOD R1, R2 ;round
			DIV R2, =2
			DIV R1, R2
			ADD R3, R1
			
			MUL R3, R5 ;fix the sign			
			
			
    ; calculate effect of centrifugal force

	; F=(v^2)/r
	; dv = ((v * v) >> 16) / (6789+(h>>16)) m/s2 fx16.8
	; should be accurate at imaginable conditions
			LOAD R1, gsvel
			JPOS R1, cforce
			MUL R1, =-1
cforce		PUSH SP, =0 ;vel ^2
			PUSH SP, =0
			PUSH SP, R1
			PUSH SP, R1
			CALL SP, multiply
			POP SP, R4
			POP SP, R2
			
			SHR R4, =18		
			SHL R2, =12		
			OR R4, R2

			
			LOAD R2, gsalt
			SHRA R2 , =16
			ADD R2, =6790
			
			LOAD R5, R4 ;save for rounding
			
			DIV R4, R2
			
			
			MOD R5, R2 ;round
			DIV R2, =2
			DIV R5, R2
			ADD R4, R5
			
			MUL R4, =-1 ;force vector points up
					
			
	; calculate moon gravity at current height
			LOAD R1, gsalt
			; GRAVITY MODEL
			;i2 = (27810240+(h>>4))/6789;//2dec
			;res= 27276565/((i * i)>>8); //24dec
			SHRA R1, =4
			ADD R1, cgconst
			DIV R1, =6790 
			PUSH SP, =0 ;R1 ^2
			PUSH SP, =0
			PUSH SP, R1
			PUSH SP, R1
			CALL SP, multiply
			POP SP, R1
			POP SP, R2 
			SHR R1, =8 			
			SHL R2, =22
			OR R1, R2
			LOAD R2, cgconst2
			DIV R2, R1
			ADD R4, R2
			
gravitDN	STORE R2, ggrav

	; calculate euler force
	;dist = (h>>8) + 1738140;
	;i =  (dist -(ay>>11)) - (d>>10); //16b0
	;i = ((i*i)>>16)/dist;//16b-16
	;res = ( - (((ax>>7)*(ay>>7))/i) - (((ax>>7)*(d>>7))/i) - (((v>>7)*(ay>>7))/i) - (((d>>7)*(v>>7))/i) )>>12;
	;res = res<0 ? res+1 : res;
	
			LOAD R1, gsalt
			SHRA R1, =8
			ADD R1, cgmradi ;r1=dist
			LOAD R2, R1
			LOAD R5, R4 ; ay
			SHRA R5, =11
			SUB R2, R5
			LOAD R5, gsdes
			SHRA R5, =10
			SUB R2, R5
			PUSH SP, =0 ; i ^2
			PUSH SP, =0
			PUSH SP, R2
			PUSH SP, R2
			CALL SP, multiply
			POP SP, R2
			POP SP, R5 
			SHR R2, =16 			
			SHL R5, =14
			OR R2, R5
			DIV R2, R1 ;R2 = i	
			
			LOAD R0, =0
			
			LOAD R1, R3
			LOAD R5, R4
			SHRA R1, =7
			SHRA R5, =7
			MUL R1, R5
			DIV R1, R2
			SUB R0, R1
			
			LOAD R1, R3
			LOAD R5, gsdes
			SHRA R1, =7
			SHRA R5, =7
			MUL R1, R5
			DIV R1, R2
			SUB R0, R1
			
			LOAD R1, gsvel
			LOAD R5, R4
			SHRA R1, =7
			SHRA R5, =7
			MUL R1, R5
			DIV R1, R2
			SUB R0, R1
			
			LOAD R1, gsdes
			LOAD R5, gsvel
			SHRA R1, =7
			SHRA R5, =7
			MUL R1, R5
			DIV R1, R2
			SUB R0, R1
			
			SHRA R0, =12
			
			
			JNNEG R0, euler01
			ADD R0, =1
euler01		STORE R0, buf0
			ADD R3, buf0


						
			
	; update velocities and position
	; We use symplectic Euler stepping equations.
	; constant forces are r3 (VEL. acc.  fx15.10) and r4 (DES. acc fx15.10)
	
			LOAD R1, gsalt
			LOAD R2, gsdes		

			SHRA R2, =2 ;(des. speed in fx15.10, alt in fx24.8, so DES = >>2)
			
			SUB R1, R2 ; = alt0 + v0			
			
			LOAD R5, R4
			ADD R5, gsdes
			STORE R5, gsdes ;velY + acc0

			SHRA R4, =3;(acceleration in fx15.10, alt in fx15.10, so acc/2 = >>3)
			
			SUB R1, R4 ; = alt0 + 1/2 acc t^2.
			
			STORE R1, gsalt
			
			LOAD R5, R3
			LOAD R1, gsvel
			ADD R1, R3
			STORE R1, gsvel ;VEL0 + acc0
			
					
			
			
	
	
	;MISSION OBJECTIVE CHECKS
	;update time
			LOAD R1, gtime
			ADD R1, =1
			STORE R1, gtime
			
			JUMP MAINloop
			
			svc sp, =halt			


; (UINT30 retL,UINT30 retH) function multiply (	uint30 parA, uint30 parB)
; GLOBAL: uses buffer
; 15 bit results because we can't multiply 16-bit integers due to ttk's overflow system
retH EQU -5
retL EQU -4
parA EQU -3
parB EQU -2
multiply	PUSHR SP
			LOAD R1, parA(FP)
			LOAD R2, parA(FP)
			AND R1, 0x7FFF
			SHR R2, =15
			LOAD R3, parB(FP)
			LOAD R4, parB(FP)
			AND R3, 0x7FFF
			SHR R4, =15
			
			;AL*BL
			LOAD R5, R1
			MUL R5, R3
			LOAD R0, R5
			AND R0, 0x7FFF
			STORE R0, buf0 ;result ls 15bit
			SHR R5, =15
			STORE R5, buf1 ;carry
			
			;AL*BH	
			LOAD R5, R1
			MUL R5, R4
			LOAD R0, R5
			AND R0, 0x7FFF
			STORE R0, buf2 ;L
			SHR R5, =15
			STORE R5, buf3 ;carry
			
			;AH*BL
			LOAD R5, R2
			MUL R5, R3
			LOAD R0, R5
			AND R0, 0x7FFF
			SHR R5, =15
			STORE R5, buf4 ;carry
			
			ADD R0, buf1
			ADD R0, buf2
			LOAD R3, 0xC0cons
			AND R3, R0 ;carry 1 bit
			XOR R0, R3
			SHR R3, =15
			SHL R0, =15
			ADD R0, buf0
			
			;AH*BH
			MUL R2, R4
			ADD R2, buf3
			ADD R2, buf4
			ADD R2, R3

			;28+32:
			;LOAD R3, =3
			;AND R3, R2
			;SHL R3, =30
			;OR R0, R3
			;SHR R2, =2
			STORE R2, retH(FP) ; result ms 30bit
			
			STORE R0, retL(FP) ;result ls 30bit
			
			POPR SP
			EXIT SP, =2
			
			
			
			
; void function prntFXD (fx16.8 parFXD, int scrpos)
; prints fx16.8 as 4.1dec
; GLOBAL: uses buffer
; REGISTERS: set R0 to negative to skip drawing the decimal
; based on c code from  http://homepage.cs.uiowa.edu/~jones/bcd/decimal.html

regR0 EQU 1
parFXD EQU -3
scrpos EQU -2
prntFXD		PUSHR SP			
			LOAD R5, parFXD(FP)
			STORE R5, buf7
			JNNEG R5, prntFXR00
			MUL R5, =-1			
			STORE R5, parFXD(FP)
prntFXR00	COMP R5, decmax
			JNGRE prntFXR01
			LOAD R5, decmax
prntFXR01	SHR R5, =8
			LOAD R3, R5
			MOD R3, =10
			DIV R5, =10
			LOAD R2, R5
			MOD R2, =10
			DIV R5, =10
			LOAD R1, R5
			MOD R1, =10
			DIV R5, =10
			LOAD R0, R5
			MOD R0, =10

			LOAD R5, =bufp
			PUSHR R5 ;save all registers at once
			
			LOAD R3, scrpos(FP)			
			LOAD R2, asciiSPA
			LOAD R1, ascii0			
			LOAD R4, -6(R5)				
			LOAD R0, buf7
			
			JNNEG R0, prntFX00 ;NEGATIVE?
			LOAD R2, asciiSLA
			JUMP prntFX01	
prntFX00	JZER R4, prntFX01 ;print space if zero, else content			
			LOAD R2, =18
			MUL R2, R4
			ADD R2, R1
prntFX01	PUSH SP, R2
			PUSH SP, R3
			CALL SP, print
			
			ADD R3, =4
			LOAD R2, =18
			MUL R2, -5(R5)
			ADD R2, R1
			PUSH SP, R2
			PUSH SP, R3
			CALL SP, print
			
			ADD R3, =4
			LOAD R2, =18
			MUL R2, -4(R5)
			ADD R2, R1
			PUSH SP, R2
			PUSH SP, R3
			CALL SP, print
			
			ADD R3, =4
			LOAD R2, =18
			MUL R2, -3(R5)
			ADD R2, R1
			PUSH SP, R2
			PUSH SP, R3
			CALL SP, print
			
			;decimal, skip if r0<0
			LOAD R0, regR0(FP)
			JNEG R0, prntFX02
			ADD R3, =6
			LOAD R2, parFXD(FP)
			AND R2, =255
			SHL R2, =8
			DIV R2, =6553
			MUL R2, =18
			ADD R2, ascii0 
			PUSH SP, R2
			PUSH SP, R3
			CALL SP, print			
			
prntFX02	POPR SP
			EXIT SP, =2
			
 
			
; void function spriteD (sprite pointer, screen point)
; because looping costs cycles :>
parSPR EQU -3
parONS EQU -2
spriteD		PUSH SP,R1 
			PUSH SP,R2 
			PUSH SP,R3 
			
			LOAD R1, =8			;line counter
			LOAD R2, parSPR(FP) ;sprite pointer
			LOAD R3, parONS(FP) ;screen point
			SUB R3, =1
			
spriteL		PUSH R3, 0(R2)
			PUSH R3, 1(R2)
			PUSH R3, 2(R2)
			PUSH R3, 3(R2)
			PUSH R3, 4(R2)
			PUSH R3, 5(R2)
			PUSH R3, 6(R2)
			PUSH R3, 7(R2)
			ADD R3, =152
			ADD R2, =8
			PUSH R3, 0(R2)
			PUSH R3, 1(R2)
			PUSH R3, 2(R2)
			PUSH R3, 3(R2)
			PUSH R3, 4(R2)
			PUSH R3, 5(R2)
			PUSH R3, 6(R2)
			PUSH R3, 7(R2)
			ADD R3, =152
			ADD R2, =8
			PUSH R3, 0(R2)
			PUSH R3, 1(R2)
			PUSH R3, 2(R2)
			PUSH R3, 3(R2)
			PUSH R3, 4(R2)
			PUSH R3, 5(R2)
			PUSH R3, 6(R2)
			PUSH R3, 7(R2)
			ADD R3, =152
			ADD R2, =8
			PUSH R3, 0(R2)
			PUSH R3, 1(R2)
			PUSH R3, 2(R2)
			PUSH R3, 3(R2)
			PUSH R3, 4(R2)
			PUSH R3, 5(R2)
			PUSH R3, 6(R2)
			PUSH R3, 7(R2)
			ADD R3, =152
			ADD R2, =8
			PUSH R3, 0(R2)
			PUSH R3, 1(R2)
			PUSH R3, 2(R2)
			PUSH R3, 3(R2)
			PUSH R3, 4(R2)
			PUSH R3, 5(R2)
			PUSH R3, 6(R2)
			PUSH R3, 7(R2)
			ADD R3, =152
			ADD R2, =8
			PUSH R3, 0(R2)
			PUSH R3, 1(R2)
			PUSH R3, 2(R2)
			PUSH R3, 3(R2)
			PUSH R3, 4(R2)
			PUSH R3, 5(R2)
			PUSH R3, 6(R2)
			PUSH R3, 7(R2)
			ADD R3, =152
			ADD R2, =8
			PUSH R3, 0(R2)
			PUSH R3, 1(R2)
			PUSH R3, 2(R2)
			PUSH R3, 3(R2)
			PUSH R3, 4(R2)
			PUSH R3, 5(R2)
			PUSH R3, 6(R2)
			PUSH R3, 7(R2)
			ADD R3, =152
			ADD R2, =8
			PUSH R3, 0(R2)
			PUSH R3, 1(R2)
			PUSH R3, 2(R2)
			PUSH R3, 3(R2)
			PUSH R3, 4(R2)
			PUSH R3, 5(R2)
			PUSH R3, 6(R2)
			PUSH R3, 7(R2)
			POP SP, R3
			POP SP, R2
			POP SP, R1
			EXIT SP, =2
			
; void function print(
; char pointer
; screen point)
wriPFON EQU -3
wriPSCR EQU -2
print		PUSH SP,R2 
			PUSH SP,R3 
			
			LOAD R2, wriPFON(FP) ;character pointer
			LOAD R3, wriPSCR(FP) ;screen point
			SUB R3, =1
			
			PUSH R3, 0(R2)
			PUSH R3, 1(R2)
			PUSH R3, 2(R2)
			ADD R3, =157
			PUSH R3, 3(R2)			
			PUSH R3, 4(R2)
			PUSH R3, 5(R2)
			ADD R3, =157
			PUSH R3, 6(R2)
			PUSH R3, 7(R2)
			PUSH R3, 8(R2)
			ADD R3, =157
			PUSH R3, 9(R2)
			PUSH R3, 10(R2)
			PUSH R3, 11(R2)
			ADD R3, =157
			PUSH R3, 12(R2)
			PUSH R3, 13(R2)
			PUSH R3, 14(R2)
			ADD R3, =157
			PUSH R3, 15(R2)
			PUSH R3, 16(R2)
			PUSH R3, 17(R2)

			POP SP, R3
			POP SP, R2
			EXIT SP, =2
